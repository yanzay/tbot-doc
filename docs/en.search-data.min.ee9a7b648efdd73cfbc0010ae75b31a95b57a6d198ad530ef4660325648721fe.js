'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/tbot-doc/basics/','title':"Basics",'content':"Telegram Bot Basics Register a Bot First of all, you need to create a bot in Telegram. There is a special bot for this purpose - @BotFather. Open chat with BotFather and press “Start” to start chat with it. It will show you help message to guide through the steps:\n Click /newbot link in the help message, or send /newbot message to chat. Then BotFather will ask you for the name of your bot. You can choose anything you like, for example, MyTest. After the name, BotFather will ask for a username of the bot. It must end with “bot”, so users can differentiate it from real people.  You’re done! BotFather will provide authentication token for the bot, just provide it to tbot on initialization with tbot.New().\nGet Updates from Telegram Telegram bots can interact with Telegram servers in two different ways: using long polling or webhooks. In this section we will review both ways and how to implement them in tbot.\nLong polling In long polling setup tbot act as a client, asking to Telegram server for updates and waiting when they're available. Example scenario in following diagram:\n sequenceDiagram tbot-Telegram: Hello Telegram, any updates for me? Telegram--tbot: Yes, here they are! tbot-Telegram: Great! And now? activate Telegram Note right of Telegram: Hm... Wait a min... Telegram--tbot: Found one! deactivate Telegram tbot will use long polling by default, when you create new instance of Bot:\nbot := tbot.New(token) This kind of setup is really handful during development and for moderate load bots. If your bot is suppose to be highly interactive or be used by a lot of users, the best production grade setup is using webhooks.\nWebhooks In the webhooks setup tbot acts like a server, listening for a requests from Telegram with updates.\nIt looks like on the following diagram:\nsequenceDiagram tbot-Telegram: Hi! I'm listening on https://example.com activate Telegram Telegram-tbot: User is typing! Telegram-tbot: User sent you a message! Telegram-tbot: User sent you a picture! Telegram-tbot: User pressed the button! deactivate Telegram To setup webhook just pass it's configuration on initializing:\nbot := tbot.New(token, tbot.WithWebhook(\u0026#34;https://example.com\u0026#34;, \u0026#34;:8080\u0026#34;)) tbot.WithWebhook function takes two parms:\n public URL of web service address for server to listen on  Note: you need HTTPS endpoint with a valid certificate. You may want to use service like LetsEncrypt to get one.  Use Telegram Bots API Client "});index.add({'id':1,'href':'/tbot-doc/quick-start/','title':"Quick Start",'content':"Quick Start Installation go get github.com/yanzay/tbot/v2 Usage Simple usage example:\npackage main import ( \u0026#34;log\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/yanzay/tbot/v2\u0026#34; ) func main() { bot := tbot.New(os.Getenv(\u0026#34;TELEGRAM_TOKEN\u0026#34;)) c := bot.Client() bot.HandleMessage(\u0026#34;.*yo.*\u0026#34;, func(m *tbot.Message) { c.SendChatAction(m.Chat.ID, tbot.ActionTyping) time.Sleep(1 * time.Second) c.SendMessage(m.Chat.ID, \u0026#34;hello!\u0026#34;) }) err := bot.Start() if err != nil { log.Fatal(err) } } "});index.add({'id':2,'href':'/tbot-doc/categories/','title':"Categories",'content':""});index.add({'id':3,'href':'/tbot-doc/docs/','title':"Docs",'content':""});index.add({'id':4,'href':'/tbot-doc/tags/','title':"Tags",'content':""});index.add({'id':5,'href':'/tbot-doc/','title':"tbot documentation",'content':"tbot - Telegram Bot Server   Full Telegram Bot API 4.4 support Zero dependency Type-safe API client with functional options Capture messages by regexp Middlewares support Can be used with go modules Support for external logger MIT licensed  Getting started    "});})();